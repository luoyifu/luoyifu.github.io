---
layout:     post
title:      "从电子病历数据中发现真知"
subtitle:   "电子病历数据的处理与分析（1）"
date:       2018-10-15 8:00:00
author:     "Luo Yifu"
header-img: "img/post-bg-2015.jpg"
tags:
    - 电子病历数据
    - 深度学习
    - 实践课题
---
# 从电子病历数据中发现真知——电子病历数据的处理和分析（1）

## 综述
电子病历数据（Electronic Medical Records, EMR）是医疗数据中的一个重要组成部分，也是一个有待发掘的宝库。深度学习如今在医疗影响识别方面已经取得了许多令人瞩目的进展，可以预见，未来基于医疗数据的计算机辅助诊断、决策支持，甚至是电子医生必然会有更加广阔的发展。

## 电子病历数据挖掘中的困难
电子病历数据涵盖广泛，囊括患者从入院到出院全流程的信息记录。但这些信息是由医生人工记录，不可避免出现不规范用语、生活化语言、语言没有固定格式等问题，这给自然语言处理留下了很多现实的麻烦。简单来说，电子病历数据存在以下一些问题：
1. 数据不是结构化的
2. 同样一个意思可以有多种不同表述形式
3. 未使用统一标准医学术语
4. 病例中有大量无用信息需要过滤

## 数据获取
我拿到了某医院呼吸科的近2000份病历作为初期数据的资源。这些病历包括主诉、体格检查、病史（个人史，家族史，婚育史）、辅助检查、诊断、医生查房、科主任查房等一个患者从入院到出院完整的病历数据，暂且弃掉影像学检查类数据。

我的目的，是想要基于大量的电子病历数据的学习和挖掘，对呼吸科疾病进行辅助诊断和决策支持。

选用呼吸科数据的一个原因是其所涉及疾病大多不复杂，没有大量影像学结果需要判读，大多不需要手术干预，主要以用药干预为主。这为我们的研究提供了许多便利。

## 数据清洗
在数据分析中，数据清洗起到基础和关键作用。对于EMR数据的清洗最关键的就是提取病历中的特征。主要思路有两条：
1. 基于医学关键词列表，使用正则表达式的方式提取具体的特征；
2. 基于自然语言处理中的隐迪利克雷分布主题建模（LDA方法）或word2vec方法，提取抽象的特征。
简单分析一下这两种方法的优劣：
方法1：医生在病例中书写具有随意性，多意性，同一个意思可能会有不同表述，没有规范统一的医学辞典，书写的随意性（例如少标点符号等）。我阅读的一些文献中，处理EMR数据第一步大多是将病例中的词语与MedDRA进行映射比对，将表述标准化。因此，接下来的问题就是我们构建的医学术语词典不完备，许多特征不容易抓取。其次，对时间的抓取有苦难，比如经常看到“3天前，近期，1个月内”等不同时间表述方式。另外，此种方式提取特征后不可避免使用词袋法来描述病历数据，如此会丢失掉病例特征之间的关联性。
方法2：这个方法忽略了具体特征，而是提取抽象的特征。这种方法的好处是省时省力，且使用模糊的“主题”作为特征能够隐含病历中特征的关联性。但缺陷也很明显，许多关键性的特征并不能被识别出来。

在本研究中，我选择第二种思路。清洗数据的结果优劣直接影响后续的分析，因此清洗数据应该提起格外的重视。

## 数据清洗实践
这里放上清洗数据所用的代码：
```
# 读取病历数据，并根据标点符号分词，将病历数据存储为一个个list。
# 读取单一检查数据，并根据“。，”进行分割。分割成的每项特征写入word_list列表中
def read_exam_file_single(filename):
    import re
    word_list = []
    f = open(filename,'r')
    t = f.read()
    t = re.sub(r'\s+', '', t)  # 去除多空格 to空格
    t = re.sub(r'\n+', '', t)
    for x in re.split(r'[、，。]', t):  # 按照“。，、”对字符串进行切割
        x = Pre_Treatment.wash_data_info(x)
        x = Pre_Treatment.wash_exam_data(x)
        word_list.append(x)
    return word_list


# 清洗检验数据，除去各种符号和编码，对检验结果特殊符号进行替代
def wash_exam_data(text_str):
    import re
    text_str = re.sub(r'↑', '升高', text_str)
    text_str = re.sub(r'↓', '降低', text_str)
    # 如检验结果为‘肌酐62.00umol/L’，替换为‘肌酐正常’，如为‘尿酸206.00umol/L↓’替换为‘尿酸降低’
    text_str = re.sub(r'\d.*?L|\d.*?%','正常', text_str) # 匹配如2.3mol/L,2.3%等检验数值，并用‘正常’替代
    text_str = re.sub(r'正常升高','升高',text_str)
    text_str = re.sub(r'正常降低','降低',text_str)
    text_str = re.sub(r'[\s+\.\!\/_,$%*()?;；:-【】+\"\']+|[+——！，;:。？、~@#￥%……&（）]+', '', text_str)
    text_str = re.sub(r'\s+', '', text_str)  # trans 多空格 to空格
    text_str = re.sub(r'\n+', '', text_str)  # trans 换行 to空格
    text_str = re.sub(r'\t+', '', text_str)  # trans Tab to空格
    text_str = re.sub(r'主诉|辅助检查|实验室及辅助检查|：|入院后行|入院后|我院门诊|我院急诊|入科后','',text_str)
    return text_str


# 清洗掉日期信息
def wash_data_info(text_str):
    import re
    text_str = re.sub(r'(\d{4}-\d{1,2}-\d{1,2})','', text_str) # 清洗如2018-09-01样的日期信息
    text_str = re.sub(r'(\d{4}年)','', text_str)
    text_str = re.sub(r'(\d{1,2}月)','', text_str)
    text_str = re.sub(r'(\d{1,2}日)','', text_str)
    text_str = re.sub(r'(\d{1,2}:\d{1,2})','', text_str) # 清洗如9:40样的时间信息 
    return text_str

```
解释：
1. 关于数值形式检验结果的处理：我们忽略了检验结果的具体数值，一方面是因为表现正常的医学检验结果是在一个范围区间波动的（患者的个体化差异，因此正常范围内的波动数值并不具备特别大的参考意义），因此只要在特定范围内，都不认为有异常，另一方面，在检验科的检验报告中会体现结果偏高或偏低，并用“↑或↓”来表示，因此只需要读取这两个特殊符号就可以获悉该结果偏离程度。我们的做法是将具体检验数值忽略，并用“正常，升高，降低”来表示该检验结果。这种表述方式的一个缺陷是，如果异常，不能评估异常的程度。
2. 时间日期的处理：时间数据是很有参考价值的。但在病例中，因为其表述方式变化较大，比如“30年前开始吸烟，3周前检验，持续1星期”等，涉及发病时间，持续时间，入院时间，治疗时间，发病、入院、治疗时间间隔等许多临床意义不同的概念，识别起来难度很大，暂时没有较好的办法进行处理，因此忍痛舍去。